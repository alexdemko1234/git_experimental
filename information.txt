строка (string) - 'Hello' "Alex"

числовий (number) - !!!БЕЗ ЛАПОК ТА ПРОБІЛИ!!! 14 15 2183
    цілі (integer) - 12 34 563
    нецілі (дробові, float) - !!!ПИШУТЬСЯ ЧЕРЕЗ КРАПКУ, НЕ КОМУ!!! 43.8 12.9

булевий (boolean) - !!!БЕЗ ЛАПОК!!! АБО True АБО False


змінні - це будь-яка літера, або набір літер (слово), яке містить в собі дані; пишуться !!!БЕЗ ЛАПОК!!! текст без пробілів (суцільний текст) (можете після першого символа додати _ або число)
описати змінні - це контейнер (коробка) всереди якого є щось (дані)

Коли ось так приєднується строка - це називається 'конкатенація' -> "Hello, " + firstname + " " + lastname + "!"

x = 12
y = 43.7

married = True
children = False

asdf = "Hello"

greetings_1 = "My name is Alex"
greetings_2 = "Hello, I am Alex"
greetings_3 = "Salute, here is Alex"

greetings1 = "My name is Alex"
greetings2 = "Hello, I am Alex"
greetings3 = "Salute, here is Alex"

print(greetings_1, greetings_2, greetings_3)




Умови (condition) ; якщо вирази (if statements) ; якщо ... інакше (if ... else)

Ключові слова (if, elif, else, and, or, not) -> оранжевий колір, після них ставимо пробіл та пишемо дані...

Умовний вираз - це до та після ключових слів (and, or)

Умовний блок - це if + elif + else

not - пишеться до умовного блоку

*Умови бажано писати через пробіл
*!!!!!!Пишемо відступ!!!!!!

Якщо (if) -> воно обовʼязкове в умовах; пишеться на початку; пишемо один раз; ми пишемо умову для нього
Інакше якщо (elif ; else if) -> воно НЕ обовʼязкове в умовах; пишеться в середині; пишемо скільки завгодно; ми пишемо умову для нього
Інакше (else) -> воно НЕ обовʼязкове в умовах; пишеться в кінці; пишемо один раз; ми НЕ пишемо умову для нього

Від одного значення буде залижети якась відповідь:
1. Якщо число більше 9, то ...
2. При числі 9 буде ... , а при числі 10 буде ...






Цикли (cycle), колообіг - коли щось повторюється (loop), поки (while), для (for)

Ітерація - це один прохід циклу
Ітерабильний елемент - це тип даних, по якому можна пройтись (строка, список, кортеж, словник, множина, або функція range())

*Цикл працює на відмінну від "якщо ... інакше" безліч разів, поки умова буде правильна

Ключові слова (while, for, break, continue) -> оранжевий колір, після них ставимо пробіл та пишемо дані...

Поки (while) -> зазвичай для безкінечного циклу; після нього умова; !!!створити перед while змінну!!!, !!!всередині while змінювати цю змінну!!!
Для (for) -> для всіх інших варіантів циклу (зазвичай, якщо по чомусь треба пройтись); після нього пишемо слово, яке буде нам за змінну, потім слово "in", а потім ітерабильний елемент (змінна - дані)

Оператор break (зламати) - коли його бачить цикл він зупиняє цикл
Оператор continue (продовжити) - коли його бачить цикл він зупиняє ітерацію та починає нову ітерацію

Функція range (діапазон) - це функція, де Ви можете написати діапазон чисел між та до





Послідовність = ітерабильний елемент (обʼєкт)
Ітерабильний елемент - це тип даних, по якому можна пройтись (строка, список, кортеж, словник, множина, або функція range())

Список (list) - це список з елементів, через кому у КВАДРАТНИХ СКОБОЧКАХ [], містить будь-які типи даних всередині себе
Множина (set) - це список з елементів, через кому у ФІГУРНИХ СКОБОЧКАХ {}, містить будь-які типи даних всередині себе, АЛЕ ТАМ ТІЛЬКИ УНІКАЛЬНІ ЗНАЧЕННЯ - НЕ УНІКАЛЬНІ ОБ'ЄДНУЮТЬСЯ
Кортеж (tuple) - це список з елементів, через кому у КРУГЛИХ СКОБОЧКАХ () - АБО ІНКОЛИ БЕЗ НИХ, містить будь-які типи даних всередині себе, АЛЕ ЙОГО НЕ МОЖНА ЗМІНЮВАТИ

РОЗПАКОВКА (ДЕСКТРУКТУРИЗАЦІЯ) - допомагає показати унікальність, це коли Ви можете задати послідовності різні змінни для кожного значення
* - пишете перед назвою змінної, для того, щоб усі дані помістит в цей елемент



Словник (dict; dictionary) - це список з елементів, через кому у ФІГУРНИХ СКОБОЧКАХ {} - ТА КОЖНІ ДАНІ ОПИСУЮТЬСЯ ТАК ЗВАННИМ "КЛЮЧИКОМ", містить будь-які типи даних всередині себе






Функції

Функції = дії

Все програмування складається, з того, що Ви працюєте з даними (зміні) та діями (функціями)

Функція - це частина програми, яка часто повторюється; або її відділяють, як окрему логіку програми








Навіщо потрібна рекурсія?

Рекурсія потрібна для вирішення математичних задач. Наприклад: знайти число Фібоначчі від 9.




cd - change directory
mkdir -> make directory
echo “my text” > test.txt
ls ...
rm ...
touch ...



1.) git init
2.) git add .
3.) git commit -m "..."

*.) git status
**.) git log
***.) git checkout ...
****.) git switch -